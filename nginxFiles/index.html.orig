<!DOCTYPE html>
<html class="no-js">

<head>
  <meta charset="utf-8">
  <title>Python Application Programming</title>

  <!-- Facebook Comment Moderation -->
  <meta property="fb:app_id" content="1495199314115514"/>

  <!-- Just making sure that for the guest page there's no cache -->
  <meta http-equiv="Cache-control" content="no-cache">
  <meta http-equiv="Expires" content="-1">

  <meta name="description" content="This is a intermediate level course in Python.">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link href='https://fonts.googleapis.com/css?family=Source+Code+Pro' rel='stylesheet' type='text/css'>

  <!-- Place favicon.ico and apple-touch-icon(s) in the root directory -->

  <!-- <script src="components/modernizr/modernizr.js"></script> -->


  <!-- Place all links before javascript -->
  <!-- Font Awesome -->
  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">

  <!-- Bootstrap -->
  <link href="../components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- Reveal -->
  <link rel="stylesheet" href="../components/reveal.js/css/reveal.min.css">

  <link rel="stylesheet" href="../components/reveal.js/css/theme/solarized.min.css" id="theme">

  <!-- Pace: For the progressbar -->
  <link rel="stylesheet" href="../components/pace/themes/blue/pace-theme-minimal.min.css">

  <!-- Facebook Comments-->
  <link rel="stylesheet" href="../css/comments.css">

  <script src="../components/jquery/dist/jquery.min.js"></script>

  <script src="../components/bootbox.js/bootbox.min.js"></script>

  <script src="../components/bootstrap/dist/js/bootstrap.min.js"></script>

  <script src="../components/pace/pace.min.js"></script>


  <script src="../js/facebook_comments.js"></script>

  <!-- Stripe Checkout --> 
  <script type="text/javascript" src="https://checkout.stripe.com/checkout.js"></script>

   <!-- For rendering Latex math symbols -->
   <script type="text/javascript"
     src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
   </script>

  <!-- If the query includes 'print-pdf', use the PDF print sheet -->
  <!-- file:///C:/cygwin/.../html5/templates/index.html?print-pdf#/ -->
  <script>
    document.write( '<link rel="stylesheet" href="components/reveal.js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
  </script>
  <link rel="stylesheet" href="../css/main.css">
  <link rel="stylesheet" href="../css/extra.css">
  <link rel="stylesheet" href="../css/pygments.css">

<!-- start Mixpanel --><script type="text/javascript">
(function(e,b){if(!b.__SV){var a,f,i,g;window.mixpanel=b;a=e.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"===e.location.protocol?"https:":"http:")+'//cdn.mxpnl.com/libs/mixpanel-2.2.min.js';f=e.getElementsByTagName("script")[0];f.parentNode.insertBefore(a,f);b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==
typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");for(g=0;g<i.length;g++)f(c,i[g]);
b._i.push([a,e,d])};b.__SV=1.2}})(document,window.mixpanel||[]);
mixpanel.init("17547aea333d7f600549a8c11400d12c");
</script><!-- end Mixpanel -->

<script>
  function submit_form()
  {
    document.getElementById("login_form").submit();
  }

</script>


</head>




<body>

<div id="fb-root"></div>
<form id="login_form" action="/login" method="post"></form>

  <!--[if lt IE 8]>
      <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
  <![endif]-->

<!-- Subscribe Modal -->
<div class="modal fade" id="subscribeModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
         <span aria-hidden="true">&times;</span>
        </button>
        <h4 class="modal-title">Subscribe to Unlock all Chapters</h4>
      </div>
      <div class="modal-body">
        <p>If you have already subscribed or if you would like to subscribe, please
           verify with the appropriate gmail account.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="submit_form()">
          Verify with Gmail
        </button>
      </div>
    </div><!-- /.modal-content-->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="navbar navbar-inverse navbar-static-top" role="navigation">
	<div class="navbar-header">
		<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
		<span class="sr-only">Toggle navigation</span>
		<span class="icon-bar"></span>
		<span class="icon-bar"></span>
		<span class="icon-bar"></span>
		</button>
		<a class="navbar-brand" rel="home" href="/" title="Home">Home</a>
	</div>
	<div class="collapse navbar-collapse navbar-ex1-collapse">
		<ul class="nav navbar-nav navbar-left"> 
			<li><a href="https://python.org">Python</a></li>
			<li><a href="http://compgeom.com/~piyush">Contact</a></li>
                        <li><a href="http://compgeom.com/~piyush/teach/py14/">About</a></li>
                        <li id="twitter-icon">
                            <a href="https://twitter.com/share" class="twitter-share-button" data-url="http://bit.ly/pythonclass" data-via="blibonline" data-hashtags="python">Tweet</a>
                            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
                        </li>
                        <li>
		          <form class="navbar-form" role="search">
                            <div class="input-group">
                              <input type="search" id="searchinput" placeholder="Search" class="form-control">
                              <div class="input-group-btn">
                                <button id="searchbutton" class="btn btn-default" type="submit">
                                    <i class="glyphicon glyphicon-search"></i>
                                </button>
                              </div>
                            </div>
                          </form>
                        </li>
		</ul>
		<div class="col-sm-3 pull-right">
                 <button type="button" class="btn btn-default navbar-btn" data-toggle="modal" data-target="#subscribeModal">
                           Unlock All Chapters!
                         </button>
		</div>
	</div>
</div>

  <!-- Add your site or application content here -->

  <noscript>Please enable JavaScript to view the page correctly. </noscript>

  <div class="reveal">
    <div class="slides">

<!--split-->
      <section id="slide0000" data-background="http://turbo.premiumpixels.com/wp-content/uploads/2011/05/preview11.jpg">

        <h1>Python</h1>
        <h3><a href="http://compgeom.com/~piyush/teach/py14">Welcome to Python Application Development</a></h3>
        <p>
          <small>Created by <a href="http://compgeom.com/~piyush">Piyush Kumar</a> / <a href="http://twitter.com/blibonline">@blibonline</a></small>
         <br> <small>Maintained by <a href="https://twitter.com/biswas">Biswas Parajuli</a></small>
        </p>
        <p>
          <small>Use spacebar and arrow keys (<b>&#8592;</b> and <b>&#8594;</b>) to navigate. Please report issues <a href="https://bitbucket.org/piyush/python-slides/issues">here</a>.</small>
        </p>
      </section>

<section id="slide0001" data-unique="acknowledgements_0"><h3>Acknowledgements</h3>
        <p>Please let me know if I missed you.</p>
        <ul class="multicolumn"><li>Jean-Paul Calderone: <a href="http://twistedmatrix.com/">Twisted</a></li>
          <li>Python <a href="http://compgeom.com/~piyush/teach/py10/">Class of 2011</a>/<a href="http://compgeom.com/~piyush/teach/py14/">14</a></li>
          <li>David Beazley: <a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf">GIL</a></li>
          <li>#python</li>
          <li>Allen Short: <a href="https://pypi.python.org/pypi/Parsley">Parsley</a></li>
          <li>Ned Batchelder: <a href="https://pypi.python.org/pypi/coverage/">Coverage</a></li>
        </ul>
</section>

<section id="slide0002" data-unique="topics_covered_in_this_course_0"><h3>Topics Covered in this course</h3>
        <ul class="multicolumn">
          <li><a href="#/slide0005">Getting Started</a></li>
          <li><a href="#/slide0060">Types and Operations</a></li>
          <li><a href="#/slide0169" data-toggle="modal" data-target="#subscribeModal">Functions</a></li>
          <li><a href="#/slide0235" data-toggle="modal" data-target="#subscribeModal">Modules and Libraries</a></li>
          <li><a href="#/slide0281" data-toggle="modal" data-target="#subscribeModal">Text Processing</a></li>
          <li><a href="#/slide0353" data-toggle="modal" data-target="#subscribeModal">OOP</a></li>
          <li><a href="#/slide0401" data-toggle="modal" data-target="#subscribeModal">Inside Python Objects</a></li>
          <li><a href="#/slide0428" data-toggle="modal" data-target="#subscribeModal">Testing/Debugging/Tuning</a></li>
          <li><a href="#/slide0483" data-toggle="modal" data-target="#subscribeModal">Functional Programming</a></li>
          <li><a href="#/slide0509" data-toggle="modal" data-target="#subscribeModal">Algorithms in Python</a></li>
        </ul>


  </section>

<!--11111-->




<section id="slide0003" data-unique="getting_started_0"><h3>Getting Started</h3>
        <ul class="multicolumn longdata beginchapter">
        <li><a href="#/slide0004">Before we start: Version Control</a></li>
        <li><a href="#/slide0005">Before we start: Text Editors</a></li>
        <li><a href="#/slide0006">Getting/Installing Python</a></li>
        <li><a href="#/slide0007">History</a></li>
        <li><a href="#/slide0008">Design Philosophy</a></li>
        <li><a href="#/slide0009">Features</a></li>
        <li><a href="#/slide0010">Uses</a></li>
        <li><a href="#/slide0011">Drawbacks</a></li>
        <li><a href="#/slide0013">Invoking the Interpreter</a></li>
        <li><a href="#/slide0014">Interactive Mode</a></li>
        <li><a href="#/slide0016">Getting Help</a></li>
        <li><a href="#/slide0017">Why use an IDE?</a></li>
        <li><a href="#/slide0019">IDLE: Hello World</a></li>
        <li><a href="#/slide0020">Creating Programs</a></li>
        <li><a href="#/slide0022">Running Python Programs</a></li>
        <li><a href="#/slide0024">Python Statements</a></li>
        <li><a href="#/slide0026">Python Comments</a></li>
        <li><a href="#/slide0029">Python Variables</a></li>
        <li><a href="#/slide0033">Core Data Types</a></li>
        <li><a href="#/slide0035">Type of Types</a></li>
        <li><a href="#/slide0036">Reference Semantics</a></li>
        <li><a href="#/slide0040">Numbers</a></li>
        <li><a href="#/slide0045">Control Flow</a></li>
        <li><a href="#/slide0046">Conditional</a></li>
        <li><a href="#/slide0048">pass statement</a></li>
        <li><a href="#/slide0050">Indentation</a></li>
        <li><a href="#/slide0052">while loop</a></li>
        <li><a href="#/slide0053">for loop</a></li>
        <li><a href="#/slide0056">in operator</a></li>
        <li><a href="#/slide0054">printing</a></li>
        <li><a href="#/slide0056">User Input</a></li>
        <li><a href="#/slide0057">Functions</a></li>
        </ul>
</section>


<section id="slide0004" data-unique="before_we_start_0"><h3>Before we start: Version Control</h3>
        <p>Read <a href="http://mercurial.selenic.com/wiki/Tutorial#Introduction" class="readlink">An introduction to Mercurial</a></p>
        <ul><li>Use it for any code you write. </li>
         <li>Helps you keep code history.</li>
         <li>A popular alternative is <b>git</b>.</li>
         <li>Mercurial is written in Python - hence the preference</li>
         <li>In case you wanted to learn Mercurial:
           <ul><li>Google: A friendly introduction to the Mercurial DVCS by Joel Spolsky</li>
           </ul></li>
        </ul>
</section>

<section id="slide0005" data-unique="before_we_start_1"><h3>Before we start: Text Editors</h3>
        <p>We will use IDLE. Recommended Editors:</p>
        <ul class="multicolumn"><li><a href="http://www.openvim.com/tutorial.html">vim</a></li>
         <li><a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/">emacs</a></li>
         <li><a href="https://atom.io/">Atom</a></li>
         <li><a href="https://code.visualstudio.com/Download">Visual Studio Code</a></li>
         <li><a href="http://net.tutsplus.com/articles/news/perfect-workflow-in-sublime-text-free-course/">Sublimetext</a></li>
         <li><a href="http://eric-ide.python-projects.org/documentation/Eric5-TR_130910.pdf">Eric Python IDE</a></li>
         <li><a href="http://notepad-plus-plus.org/">Notepad++</a></li>
         <li><a href="http://www.sunpy.org/2011/05/07/getting-started-with-eclipse-and-pydev/">Eclipse + PyDev</a></li>
         <li><a href="http://ipython.org/notebook.html">IPython</a></li>
         <li><a href="http://www.wingware.com/doc/intro/tutorial">Wingide</a></li>
         <li><a href="http://www.jetbrains.com/pycharm/quickstart/index.html">Jetbrains PyCharm</a></li>
        </ul>
</section>


<section id="slide0006" data-background="img/pythonorg.jpg" data-unique="getting_installing_python_0"><h3>Getting/Installing Python</h3>
        <ul>
          <li> Go to python.org &#8594; Download latest 2.x or 3.x
            <ul><li> Windows: I usually use .msi from python.org/downloads</li>
            <li> Linux: I use yum install or apt-get </li>
            <li> Build from <a href="http://www.python.org/download/">source</a> on Mac/Linux:
<pre>
$ wget http://www.python.org/ftp/python/3.X.X/Python-X.X.XXX.tgz
$ tar zxf Python-X.X.XXX.tgz
$ cd Python-X.X.XXX
$ sudo apt-get install libssl-dev openssl  # Or yum, other package managers
$ ./configure --prefix=$HOME/python --with-ensurepip=install
$ make
$ make install
</pre>
          </li>
<!--
          <li> Creation of virtual environment with <pre class="inline">pyvenv</pre>:
<pre>
$ /home/piyush/python/bin/pyvenv /home/piyush/.venvs/py3XX
</pre>
          </li>
          <li>Activate the virtual environment:
<pre>
$ source /home/piyush/.venvs/py3XX/bin/activate
</pre>
          </li>
-->
            </ul>
        </li>
        <li>
        Check your Python version:
<pre>
$ python --version
</pre>
        </li>
        <li>Make sure you
            <a href="http://www.pip-installer.org/en/latest/installing.html">install pip</a>.
            With python &#8805; 3.4, pip comes with python.
        </li>
        <li>Install module <span class="index_keyword" data-indexkeyword="requests">requests</span>:
            <pre class="inline">pip install requests</pre></li>
        </ul>
</section>

<section id="slide0007" data-unique="history_0">
        <h3><span class="index_keyword" data-indexkeyword="history">History</span></h3>
        <ul>
        <li><a href="http://en.wikipedia.org/wiki/History_of_Python" class="readlink">Wiki: History of Python</a></li>
        <li>Born: Dec 1990 </li>
        <li>Born to speed up development of
        sys-admin utilities</li>
        <li>Became popular in ~2000</li>
        <li>Borrows from many other languages: ABC, C, Algol-60, Pascal, Modula 2+/3, Haskell, Java, Lisp. </li>
        <li>Supports OOP, functional programming, structured programming and others</li>
        <li>Easy to teach, easy to learn, easy to use. </li>
        <li>Cross Platform</li>
        <li>Major Implementations:
          <a href="http://python.org">Cpython</a>,
          <a href="http://pypy.org/">PyPy</a>,
          <a href="http://ironpython.net/">IronPython</a>,
          <a href="http://ironpython.net/">Jython</a></li>
        <li>Website: python.org. <a href="http://python-history.blogspot.com/">History Blog</a>.</li>
        </ul>
    
      </section>

<section id="slide0008" data-unique="design_philosophy_0">
        <h3><span class="index_keyword" data-indexkeyword="design philosophy">Design Philosophy</span></h3>
        <ul><li>User-centric design</li>
        <li>Borrow ideas freely</li>
        <li>Simple is better than complex</li>
        <li>Beautiful is better than ugly</li>
        <li>Don't fret about performance (fix it later)</li>
        <li>Readability counts</li>
        <li>Perfection is the enemy of the good</li>
        <li>Cutting corners is ok (get back to it later)</li>
        </ul>
</section>

<section id="slide0009" data-unique="features_0">
        <h3><span class="index_keyword" data-indexkeyword="features">Features</span></h3>
        <ul><li>Very High Level Language</li>
          <li>Object Oriented</li>
          <li>Scalable (Processes)</li>
          <li>Robust</li>
          <li>Rapid Prototyping</li>
          <li>Memory Manager</li>
          <li>Interpreted and Byte Compiled</li>
          <li>Others :
          Easy to read code, supports exceptions, open source, common programming tasks included, Free, Mixable, Easy2Learn&#8230;</li>
        </ul>
</section>

<section id="slide0010" data-unique="uses_0"><h3>Uses</h3>
        <ul><li>Application Development</li>
          <li>Network Programming</li>
          <li>GUI (Graphical User Interface)</li>
          <li>Text Processing / Natural Language</li>
          <li>Web Programming</li>
          <li>Testing</li>
          <li>System Administration/Shell Automation</li>
          <li>Mobile Programming</li>
          <li>Scientific and Numeric computation</li>
          <li>Education</li>
        </ul>
</section>

<section id="slide0011" data-unique="drawbacks_0"><h3>Drawbacks</h3>
        <ul><li>Edge cases. Need to remember immutable from mutable. Side Effects. Not trivial to Debug at times.</li>

        <li>Some modules are still buggy. This should improve with time.
        (True of many other languages)</li>

        <li>Threading is an issue (GIL)</li>

        <li>The 2 vs 3 fight</li>

        <li>What can it not be used for?
          <ul><li>Places where speed/resource usage is paramount:
              <ul><li>OS/ Experimental Algorithmics / &#8230; </li>
                <li>GPU computing</li>
                <li>Even in these places, one can write mostly C code and call them from python. (Still great for prototyping) </li>
              </ul></li>
          </ul></li>

        </ul>
</section>

<section id="slide0012" data-unique="quiz_0"><h3 class="quiz">Quiz</h3>
        <p>Which of the following statements is false?</p>
        <div class="answer">

          <div class="incorrect">Python is great for web applications.</div>
          <div class="answerstring">This is true. DropBox and Youtube are examples. </div>

          <div class="incorrect">CPython is an implementation of Python.</div>
          <div class="answerstring">This is true.</div>

          <div class="incorrect">Python is easy to learn.</div>
          <div class="answerstring">This is true.</div>

          <div class="correct">Python is bad for prototyping.</div>
          <div class="answerstring">Congratulations. You are right. This statement is indeed false. Python is great for prototyping.</div>


        </div>
      
</section>

<section id="slide0013" data-unique="invoking_the_interpreter_0">
        <h3><span class="index_keyword" data-indexkeyword="interpreter">Invoking the Interpreter</span></h3>
        <ul><li>On linux terminal and Windows console respectively:
<pre>
 $ python
</pre>
        <div class="includeContent">slide_scripts/00invoke.html</div>
        </li>
        <li> Options : <b>-d</b>  (debug mode), <b>-O</b> (Optimized mode)<div class="super">Not much speedup</div>),  <b>-c</b> (single command mode), <b>-h</b> (help), <b>-i</b> (interactive mode) </li>
        <li> To Exit : Windows, OS X or Linux: <b>Ctrl+D</b>
             or you can just type <b>quit()</b> or <b>exit()</b> in the interpreter.
        </li>
        <li> Read up on <b>v</b>, <b>-V</b> and <b>-m</b>. Use:
<pre>
python --help
</pre>
        </li>
        </ul>
</section>

<section id="slide0014" data-unique="interactive_mode_0">
      <h3><span class="index_keyword" data-indexkeyword="interactive mode">Interactive Mode</span></h3>
      <ul><li>Type Python commands only</li>
        <li><pre class="inline">print</pre> is only required for files (not in interactive mode)</li>
        <li>Don't indent at the prompt yet</li>
        <li>Watch out for prompt changes for compound statements</li>
        <li>Terminate compound statements with a blank line</li>
        <li>Runs one statement at a time:</li>
      </ul><a href="http://runnable.com/U5NZg43zZRZYnf2Y/for-loop-on-a-string-for-python3">
      <div class="includeContent">slide_scripts/01spam.html</div>
      </a>
      
</section>

<section id="slide0015" data-unique="interactive_mode_1"><h3>Interactive Mode</h3>
        <p>After invoking the interpreter:</p>
        <div class="includeContent">slide_scripts/02interactive.html</div>
      
</section>

<section id="slide0016" data-unique="getting_help_0">
        <h3><span class="index_keyword" data-indexkeyword="help()">Getting Help</span></h3>
        <p>On the interpreter:</p>
        <div class="includeContent">slide_scripts/03gettinghelp.html</div>
        <p>Try: help(len), help(list), help(print)</p>
      
</section>

<section id="slide0017" data-unique="why_use_an_ide_0">
      <h3><span class="index_keyword" data-indexkeyword="IDE">Why use an IDE?</span></h3>
      <ul><li>code navigation features </li>
      <li>intuitive autocompletion </li>
      <li>refactoring support </li>
      <li>revision control integration </li>
      <li>automatic builds </li>
      <li>polished debugging </li>
      <li>integration with unit testing tools </li>
      <li>language-aware </li>
      <li>ticket system integration </li>
      <li>Free? </li>
      </ul>
</section>

<section id="slide0018" data-unique="idle_hello_world_0">
      <h3><span class="index_keyword" data-indexkeyword="IDLE">IDLE: Hello World</span></h3>
      <p>Watch a <a href="http://www.youtube.com/watch?v=1QnhPzkADWo">video tutorial</a></p>
      
</section>

<section id="slide0019" data-unique="idle_hello_world_1"><h3>IDLE: Hello World</h3>
        <p>Some things to remember</p>
        <ul><li>Shell:
          <ul><li><b>F1</b> - Python Docs</li>
          <li><b>Alt+p</b> - History Prev.</li>
          <li><b>Alt+n</b> - History Next.</li>
          <li><b>CTRL+Space</b> - Auto Complete.</li>
          </ul></li>

        <li>Editor:
          <ul><li><b>F5</b> - Run Program</li>
          <li>Save with extension <b>.py</b></li>
          <li>Indentation has meaning</li>
          </ul></li>
        <li>View/Modify key shortcuts:
          <ul><li>Menu &#8594; Options &#8594; Configure IDLE &#8594; Keys</li>
          </ul></li>
        </ul>
</section>

<section id="slide0020" data-unique="creating_programs_0"><h3>IDLE: Creating Programs</h3>
        <!-- Piyush: BUG: Python 3 upgrade of code fragment required -->
  <ul>
    <li> Open IDLE &#8594; Open a file &#8594; Write Python program in the text editor &#8594; Save it
    </li>
        <a href="http://runnable.com/U5NiqhmGQe1UTjH7/yahoo-finance-data-for-python3" target="_blank">
        <img src="img/idle_howto_stock_example.png" alt="First stock program" class="3@5.5"></a>
  </ul>
      
</section>

<section id="slide0021" data-unique="running_programs_0"><h3>IDLE: Running Programs</h3>
        <!-- Piyush: BUG: Python 3 upgrade of code fragment required -->
  <ul>
    <li> Run the program &#8594; Python Shell shows the output
    </li>
        <img src="img/idle_howto_stock_output.png" alt="First stock program" class="1.5@5">
  </ul>
      
</section>



<section id="slide0022" data-unique="running_python_0">
        <h3><span class="index_keyword" data-indexkeyword="run Python program">Running Python Programs</span></h3>
        <img src="img/compile_and_run.svg" alt="python compilation" class="1@6">
        <ul>
         <li> Execute <b>python stock.py</b> (from previous slide) on command line. </li>
         <li> The python interpreter translates your code into a language that your computer can understand.</li>
         </ul>
     

      </section>

<section id="slide0023" data-unique="python_programs_0">
        <h3><span class="index_keyword" data-indexkeyword="grammar">Python Programs</span></h3>
        <ul><li> Programs are composed of statements.
            <ul><li> python file input ::=  (NEWLINE | statement)* </li></ul></li>
          <li> Statements are either simple or compound.
          <ul><li> Simple Statements = expression | import | pass | ...
              <ul><li> Expressions create and process objects </li>
                <li> Typically produce at least one object/value</li>
                <li> Similar to languages such as C, Java </li>
                <li> e.g. Assignment:
                  <ul><li>
                     <pre class="inline">foo = 1 + 2</pre> is a statement where
                     <pre class="inline">foo</pre> is assigned to the value of the expression
                     <pre class="inline">1 + 2</pre>.
                    </li>
                    <li>
                      <pre class="inline">i = 0; x = [0,1]</pre>
                    </li>
                  </ul></li>
              </ul></li>
            <li> Compound Statements = if | for | while | ...
               <ul><li>Generally of the form:
<pre>
HeaderLine:
    Nested Statement Block
</pre>
               </li>
               </ul></li>
          </ul></li>
        </ul>
</section>

<section id="slide0024" data-unique="python_compound_statements_0"><h3>Python Compound Statements</h3>

      <table class="table">
      <col style="width:30%"><col style="width:30%"><col style="width:40%">
      <thead><tr><th>Statement</th>
            <th>Role</th>
            <th>Example</th>
          </tr></thead><tbody><tr><td><a href="http://www.youtube.com/watch?v=sBtmqTFc73Q">if/elif/else</a></td>
            <td>Select an action</td>
            <td>
<pre>
if stipend &gt; 5000:
  print("Eat at French restaurant")
</pre>
            </td>
          </tr><tr><td><a href="https://www.khanacademy.org/science/computer-science-subject/computer-science/v/for-loops-in-python">for</a></td>
            <td>Iterate Sequence</td>
            <td>
<pre>
for ch in 'Hello':
  print('Next Letter:',ch)
</pre>
            </td>
          </tr><tr><td><a href="https://www.khanacademy.org/science/computer-science-subject/computer-science/v/while-loops-in-python">while</a></td>
            <td>Loop</td>
            <td>
<pre>
while miles_left &gt; 0:
  print('Keep Driving')
</pre>
            </td>
          </tr></tbody></table>
</section>

<section id="slide0025" data-unique="python_simple_statements_0">
      <h3>Python Simple <span class="index_keyword" data-indexkeyword="statement">Statements</span></h3>
      <table class="table"><col style="width:20%"><col style="width:35%"><col style="width:45%">
      <thead><tr><th>Statement</th>
            <th>Role</th>
            <th>Example</th>
          </tr></thead><tbody><tr><td>pass</td>
            <td>Empty Placeholder</td>
            <td>
<pre>
while True:
  pass # Forever loop
</pre>
            </td>
          </tr><tr><td>break</td>
            <td>Terminate Loop</td>
            <td>
<pre>
for x in data:
  if x == "STOP":
    break
</pre>
            </td>
          </tr><tr><td>continue</td>
            <td>Jump to Beginning of Loop</td>
            <td>
<pre>
while True:
  if x == "SKIP":
    continue
</pre>
            </td>
          </tr><tr><td>assert</td>
            <td>Debug Check</td>
            <td>
<pre>
assert running == True, "Oops! We must run."
</pre>
            </td>
          </tr></tbody></table>
</section>

<section id="slide0026" data-unique="python_comments_0">
        <h3><span class="index_keyword" data-indexkeyword="comments">Python Comments</span></h3>
        <ul>
        <li>Comments are for information that cannot be expressed in code.</li>
        <li>Do not restate code in comments.</li>
        <li>If the comment can be expressed in code, refactor.</li>
        <li>Update comments when updating code.</li>
        </ul>
    

      </section>

<section id="slide0027" data-unique="python_comments_1">
        <h3><span class="index_keyword" data-indexkeyword="comments!multiline">Python Comments</span></h3>
        <ul>
        <li>Explain important points: <pre>x = x + 1 # include end point</pre></li>
        <li>References, Dependencies, Bugs:
        <pre>
# See Knuth, Vol 1, Page 29
# Assume filename exists
# Doesn't handle -ve numbers yet</pre>
        </li>
        <li>Doc Strings / Multiline Comments with triple quotes:
        <pre>
"""
requests.session
~~~~~~~~~~~~~~~

This module provides a Session object to manage and persist settings across
requests (cookies, auth, proxies).
"""</pre>
        </li>
        </ul>


      </section>

<section id="slide0028" data-unique="python_comments_2">
        <h3>Python Comments</h3>
        <ul>
        <li><pre>x = x + 1 <del># increment x</del></pre></li>
        <li><del>Comment every line</del></li>
        <li><del>Draw boxes, ascii art, lines, ...</del></li>
        </ul>
      

      </section>

<section id="slide0029" data-unique="python_variables_0">
        <h3><span class="index_keyword" data-indexkeyword="variables">Python Variables</span></h3>
        <ul><li>Naming or Assignment: Just a name for a value</li>
        <li>Assignment: The name on the left-hand side now refers to the result of evaluating the right-hand side. </li>
        <li>Names in Python:
          <ul><li>Similar to C++:
             <pre class="inline">[_A-Za-z][_A-Za-z0-9]*</pre>
            </li>
            <li>Also, Unicode+ characters can be used as names
            </li>
          </ul></li>
        <li>No <b>variable declaration</b> or <b>variable initialization</b> in Python.</li>
        <li>Dynamically Typed: A name can refer to any value at any time.
        <pre>
&gt;&gt;&gt; Greeting = "hello world"
&gt;&gt;&gt; Greeting = 8*8</pre>
        </li>
        <li>Strongly Typed: On an object, only operations that are valid for its type are allowed.
        </li>
        </ul>
</section>

<section id="slide0030" data-unique="python_variables_1">
        <h3><span class="index_keyword" data-indexkeyword="variables!names">Python Variables</span></h3>
        <p>Names refer to values (or objects). Everything is an object:</p>
        <ul><li>Functions, classes, modules, ... - all objects </li>
          <li>No primitive types like <b>int</b> in java</li>
          <li>Multiple names can refer to the same object
          <pre>
pi = 3.14
pi_copy = pi</pre>
          </li>
          <li>Objects live till they have references (names)</li>
        </ul>
</section>

<section id="slide0031" data-unique="python_variables_2"><h3>Python Variables</h3>
        <ul><li>Name variables to reflect what they refer to.</li>
        <li>Make variable names part of your documentation.</li>
        <li>Programs are for people to read,
        not just computers.</li>
        <li> Names to avoid:
          <ul><li> Single character names </li>
          <li> Dashes (-) in any package / module name</li>
          <li> __double_leading_and_trailing_underscore__ (reserved) </li>
          <li> Keywords : <a href="http://runnable.com/U5N9XB13KbIxw_fz/python-keywords-for-python3" target="_blank">import keyword; print(keyword.kwlist)</a></li>
          </ul></li>
        </ul>
</section>

<section id="slide0032" data-unique="python_variables_3"><h3>Python Variables</h3>
        <a href="http://runnable.com/U5N-Kh13KbIxw_gW/python-variables-simple-for-python3" target="_blank">
        <div class="includeContent">slide_scripts/04variables.html</div>
        </a>
        <p>Variables are just names for an object:</p>
        <ul><li>name &#8594; <b>Joe Mitchell</b></li>
          <li>area &#8594; <b>12.56</b></li>
        </ul>
</section>

<section id="slide0033" data-unique="core_data_types_0">
      <h3><span class="index_keyword" data-indexkeyword="core data types">Core Data Types</span></h3>
 <!--    <div class="table-responsive"> -->
        <table class="table">
        <col style="width:30%">
        <col style="width:70%">
          <thead>
            <tr>
              <th>Object Type</th>
              <th>Examples</th>
            </tr>
          </thead>
          <tbody>

            <tr>
              <td>Numbers</td>
              <td><pre class="inline">int (1234), float (3.14), complex (3+4j), decimal</pre></td>
            </tr>

            <tr>
              <td>Strings</td>
              <td><pre class="inline">"spam", "\u0394"</pre></td>
            </tr>

            <tr>
              <td>Bytes</td>
              <td><pre class="inline">b'\xce\x94', '\u0394'.encode()</pre></td>
            </tr>

            <tr>
              <td>Lists</td>
              <td><pre class="inline">[1, "two", [3, 4]]</pre></td>
            </tr>

            <tr>
              <td>Tuples</td>
              <td><pre class="inline">(4, 8, True, "hello")</pre></td>
            </tr>

            <tr>
              <td>Sets</td>
              <td><pre class="inline">{4, 8, True, "hello"}</pre></td>
            </tr>

            <tr>
              <td>Dictionaries</td>
              <td><pre class="inline">{'pi': 3.14, 'e': 2.71}</pre></td>
            </tr>

            <tr>
              <td>Files</td>
              <td><pre class="inline">open("myfile.txt", "r")</pre></td>
            </tr>


          </tbody>
        </table>
<!--      </div> -->


      </section>

<section id="slide0034" data-unique="core_data_types_1">
        <h3>Core Data Types</h3>
        <p> Why use them?
        </p>
        <ul>
          <li> Easy: Makes programs easy to write. </li>
          <li> Efficient: Compared to custom types </li>
          <li> Portable: Standard part of the language </li>
        </ul>
  

      </section>

<section id="slide0035" data-unique="type_of_types_0">
        <h3>Type of Types</h3>
        <ul><li> <span class="index_keyword" data-indexkeyword="immutable type">Immutable</span> vs Mutable types. </li>
          <li> <span class="index_keyword" data-indexkeyword="mutable type">Mutable</span> types change value in place.
            <ul><li> Immutable types don't -- Python raises error if you try:
                <div class="includeContent">slide_scripts/05assignmentimmutable.html</div>
              </li>
            </ul></li>
          <li>Example types in Python and their classification:
            <ul><li>Immutables: Numbers, Strings, Tuples, Frozensets</li>
              <li>Mutables: Lists, Dictionaries, Sets </li>
            </ul></li>
        </ul>
</section>

<section id="slide0036" data-unique="reference_semantics_0">
        <h3><span class="index_keyword" data-indexkeyword="reference">Reference Semantics</span></h3>
        <ul>
          <li><span class="index_keyword" data-indexkeyword="assignment">Assignment</span> manipulates references:
        <div class="includeContent">slide_scripts/assignment_reference.html</div>
          </li>
          <li>Very useful, but beware of mutables:
            <div class="includeContent">slide_scripts/06referencecopy.html</div>
          </li>
        </ul>
  

      </section>

<section id="slide0037" data-unique="reference_semantics_1"><h3>Reference Semantics</h3>
        <img src="img/reference_semantics_list.svg" alt="List insertion" class="3@4">
</section>

<section id="slide0038" data-unique="reference_semantics_1">
        <h3>Reference Semantics</h3>
        <img src="img/reference_semantics_integers.svg" alt="List insertion" class="3@4">
      </section>

<section id="slide0039" data-unique="quiz_1"><h3 class="quiz">Quiz</h3>
        <p>What is the value of <b>q</b> after the following execution?</p>
        <pre>
q=[1]
q.append(q)
print(q)</pre>
        <div class="answer">

          <div class="incorrect">[1,1]</div>
          <div class="answerstring">Nope!</div>

          <div class="correct">[1, [...]]</div>
          <div class="answerstring">Yes. Do you understand what happened? Python
          protects from inifite recursion when converting core data types to strings for printing. (For advanced users : list.__str__ is protected against infinite recursion. grep Py_ReprEnter in python sources. Note that you can easily construct things like this: {1: [[...]], 2: [[...]], 3: {...}} )</div>
        </div>

      
</section>

<section id="slide0040" data-unique="numbers_0">
        <h3><span class="index_keyword" data-indexkeyword="numbers">Numbers</span></h3>
        <p>The interpreter acts as an informal calculator.</p>
        <div class="includeContent">slide_scripts/07calculator.html</div>
      </section>

<section id="slide0041" data-unique="numbers_1"><h3>Numbers</h3>
        <ul><li>Python has more exotic numbers like
        <a href="http://docs.python.org/3.4/library/fractions.html">rationals</a>, complex (3+4j),
        <a href="http://docs.python.org/3.4/library/decimal.html">decimal</a>,
        booleans, etc.</li>
        <li>Integer division is tricky:
          <div class="includeContent">slide_scripts/08division.html</div>
        </li>
        </ul>
</section>

<section id="slide0042" data-unique="printing_0">
        <h3><span class="index_keyword" data-indexkeyword="print()">printing</span></h3>
        <p>Use the <b>print</b> statement to produce a line of text or to display the value of variables or both.</p>
        <div class="includeContent">slide_scripts/16print.html</div>
</section>

<section id="slide0043" data-unique="printing_1"><h3>printing</h3>
        <p>Older pythons (&lt;3) had a different print available.</p>
        <div class="includeContent">slide_scripts/17print.html</div>
      
</section>

<section id="slide0044" data-unique="user_input_0">
        <h3><span class="index_keyword" data-indexkeyword="input()">User Input</span></h3>
        <ul>
        <li><b>input</b> in python 3 is the same as
            <span class="index_keyword" data-indexkeyword="raw_input()">raw_input</span> in 2.x.
        </li>
        <li>Don't use <b>input</b> in python 2.x</li>
        <li><b>input</b> gets input from the keyboard</li>
        <li>Returns a string:
        <div class="includeContent">slide_scripts/input_returns_string.html</div>
        </li>
        <li>Not used in most python code!</li>
        </ul>
</section>

<section id="slide0045" data-unique="control_flow_0">
        <h3><span class="index_keyword" data-indexkeyword="control flow">Control Flow</span></h3>
        <a href="http://runnable.com/U5N_Oh13KbIxw_g5/python-if-simple-for-python3" target="_blank">
        <img src="img/control_flow_if.png" alt="If control flow" class="3@4"></a>
      
</section>

<section id="slide0046" data-unique="conditional_0">
        <h3><span class="index_keyword" data-indexkeyword="conditionals">Conditional</span></h3>
        <p><b>if</b> -- Relational Operators</p>

 <!--    <div class="table-responsive"> -->
        <table class="table"><col style="width:50%"><col style="width:25%"><col style="width:25%">
        <thead><tr><th>Meaning</th>
              <th>Math</th>
              <th>Python</th>
            </tr></thead><tbody><tr><td>Less than</td>
          <td>&lt;</td>
          <td>&lt;</td>
        </tr><tr><td>Greater than</td>
          <td>&gt;</td>
          <td>&gt;</td>
        </tr><tr><td>Less than or equal</td>
          <td>&#8804;</td>
          <td>&lt;=</td>
        </tr><tr><td>Greater than or equal</td>
          <td>&#8805;</td>
          <td>&gt;=</td>
        </tr><tr><td>Equals</td>
          <td>=</td>
          <td>==</td>
        </tr><tr><td>Not equal</td>
          <td>&#8800;</td>
          <td>!=</td>
        </tr></tbody></table><!--    </div> -->
</section>

<section id="slide0047" data-unique="conditional_1">
        <h3><span class="index_keyword" data-indexkeyword="if-statement">Conditional</span></h3>
        <p><b>if</b> -- A Python compound statement</p>
        <ul><li>Boolean Expressions: <b>and</b>,<b>or</b>,<b>not</b>.
          <div class="includeContent">slide_scripts/10pointinbox.html</div>
        </li>
        <li>Zero numbers and empty objects evaluate to <b>False</b>.</li>
        <li>Recap: Python compound statements are of the form:
<pre>
HeaderLine:
    Nested Statement Block
</pre>  </li>
        </ul>
</section>

<section id="slide0048" data-unique="pass_statement_0">
        <h3><span class="index_keyword" data-indexkeyword="pass">pass statement</span></h3>
        <div class="includeContent">slide_scripts/09pass.html</div>
        <ul>
        <li>Indentation = code blocks</li>
        <li>pass = empty code block </li>
        </ul>
      </section>

<section id="slide0049" data-unique="quiz_2"><h3 class="quiz">Quiz</h3>
        <p>Are the following conditions equivalent?</p>
        <ul><li>if b &gt;= a and b &lt;= c:
          </li><li>if not(b &lt; a  or b &gt; c):</li>
        </ul><div class="answer">

          <div class="correct">True</div>
          <div class="answerstring">Congratulations! Those conditions are actually equivalent. They both test if b lies inside the interval [a,c].</div>

          <div class="incorrect">False</div>
          <div class="answerstring">Look carefully!</div>

        </div>
      
</section>

<section id="slide0050" data-unique="indentation_0">
        <h3><span class="index_keyword" data-indexkeyword="indentation">Indentation</span></h3>
        <ul>
          <li>Code blocks in python are defined using indentation</li>
          <li>White spaces are used to defined code blocks. Do not use Tabs</li>
          <li>Rules
            <ul>
              <li>Use 4 spaces per level</li>
              <li>&lt; 80 chars per line</li>
              <li>Use python aware editor</li>
              <li>Use <span class="index_keyword" data-indexkeyword="pycodestyle">pycodestyle</span>
                  to check for problems in your code
<pre>
$ pip install pycodestyle
$ pycodestyle --help
$ pycodestyle --first myprog.py
</pre>
              </li>
              <li>Use <span class="index_keyword" data-indexkeyword="autopep8">autopep8</span>
                  to automatically fix trivial style problems.
<pre>
$ pip install autopep8
$ autopep8 --in-place myprog.py
</pre>
              </li>
            </ul>
          </li>
        </ul>
      </section>

<section id="slide0051" data-unique="indentation_1"><h3>Indentation</h3>
        <p>A few special cases</p>
        <div class="includeContent">slide_scripts/11indent.html</div>
      
</section>

<section id="slide0052" data-unique="while_loops_0">
        <h3><span class="index_keyword" data-indexkeyword="while loop">while loops</span></h3>
        <div class="includeContent">slide_scripts/12while.html</div>
      <ul>
        <li>from math import log, floor:
          <ul>
            <li>This statement imports the names <i>log</i> and <i>floor</i> which are defined
                in the Python standard library <i>math</i>.
            </li>
            <li>Then, <i>log, floor</i> can be used later in the program as if they were defined locally.</li>
          </ul>
        </li>
      </ul>
      </section>

<section id="slide0053" data-unique="for_loops_0">
        <h3><span class="index_keyword" data-indexkeyword="for loop">for loops</span></h3>
        <div class="includeContent">slide_scripts/13for.html</div>
      </section>

<section id="slide0054" data-unique="for_loops_1"><h3>for loops</h3>
        <div class="includeContent">slide_scripts/14for2.html</div>
      
</section>

<section id="slide0055" data-unique="for_loops_2"><h3>for loops</h3>
<pre>
for name in iterable:
    statements</pre>
      <ul><li>iterable produces objects one by one</li>
        <li>name gets assigned to these objects</li>
        <li>statements are executed once per object</li>
        <li>lots of different things are iterable
          <div class="includeContent">slide_scripts/15for3.html</div>
        </li>
        <!-- Piyush: Split this into 2.7 vs 3.3 slides -->
        <li>In Python 2.x, difference between range vs xrange : range(1, 100000) creates a list in memory with 100000 elements. xrange is a sequence object that evaluates lazily.
        </li>
      </ul>
</section>

<section id="slide0056" data-unique="in_0">
        <h3><span class="index_keyword" data-indexkeyword="in operator">in</span> operator</h3>
        <ul><li>Iteration: Lists, dicts, sets, tuples, strings, ...
<pre>
for name in iterable:
</pre>
          </li>
          <li>Containment test: Lists, dicts, sets, tuples, strings, ...
<pre>
if element in items:
</pre>
          </li>
          <li> Containment Complexity: Complexity for lists, tuples and strings is O(n). For sets and dicts it is O(1).
          </li>
          <li> Advanced: If you want these to work on your own objects,
               implement __iter__ and __contains__.
          </li>
        </ul>
</section>

<section id="slide0057" data-unique="functions_0">
        <h3><span class="index_keyword" data-indexkeyword="function">Functions</span></h3>
        <p>A function groups a set of statements that accomplish a certain task.
        Functions usually take input data, process it and returns a result.</p>
        <ul>
        <li>Use functions for code reuse.</li>
        <li>For breaking down bigger problems. Division of labor. </li>
        <li>Remember: Function length in number of lines of code &lt; 25</li>
        <li>Always test your functions</li>
        <li>Keyword <b>def</b> introduces a function definition.
<pre>
def myfunction():
    """ An example function definition """
</pre>
        </li>
        </ul>
      </section>

<section id="slide0058" data-unique="functions_1">
        <h3>Functions</h3>
        <div class="includeContent">slide_scripts/18doublefunc.html</div>
      </section>

<section id="slide0059" data-unique="library_functions_0">
        <h3><span class="index_keyword" data-indexkeyword="function!builtin,standard library">Library Functions</span></h3>
        <p>Python has a large standard library, with a huge number of builtin functions to call</p>
        <ul><li>For example:
        <pre>
import math
x = math.sqrt(10)
y = math.ceil(math.pow(x, 2))</pre>
        </li>
        <li>Try: <b>help(math)</b></li>
        <li>Try: <b>help(math.ceil)</b></li>
        <li>Try: <b>dir(math)</b>
        <ul><li>Ignores everything starting with "_"</li>
        <li>Returns all methods/names/attributes defined in an object</li>
        <li>Beware! This does not work as advertised for many objects</li>
        </ul></li>
        </ul>
</section>

<section id="slide0060" data-unique="quiz_3"><h3 class="quiz">Quiz</h3>
        <p>What will the following snippet print?</p>
        <pre>print(0O234)</pre>
        <div class="answer">

          <div class="incorrect">0O234</div>
          <div class="answerstring">Sorry.</div>

          <div class="incorrect">234</div>
          <div class="answerstring">Sorry.</div>

          <div class="correct">156</div>
          <div class="answerstring">You got it! Why? Hint: Try printing 0O10, 0O11</div>
        </div>
      
</section>

<section id="slide0061" data-unique="types_and_operations_0"><h3>Types and operations</h3>
        <ul class="multicolumn longdata beginchapter">
          <li><a href="#/slide0062">Numbers</a></li>
          <li><a href="#/slide0063">Integers</a></li>
          <li><a href="#/slide0068">Floats</a></li>
          <li><a href="#/slide0069">Boolean</a></li>
          <li><a href="#/slide0070">None</a></li>
          <li><a href="#/slide0071">Strings</a></li>
          <li><a href="#/slide0072">Unicode</a></li>
          <li><a href="#/slide0076">str, bytes and bytearrays</a></li>
          <li><a href="#/slide0078">encoding/decoding</a></li>
          <li><a href="#/slide0084">Indexing/slicing</a></li>
          <li><a href="#/slide0086">String methods</a></li>
          <li><a href="#/slide0092">Changing strings</a></li>
          <li><a href="#/slide0099">Lists</a></li>
          <li><a href="#/slide0104">List Methods</a></li>
          <li><a href="#/slide0106">List Review</a></li>
          <li><a href="#/slide0107">Advanced Lists</a></li>
          <li><a href="#/slide0111">Files</a></li>
          <li><a href="#/slide0113">File Location</a></li>
          <li><a href="#/slide0116">Dictionaries</a></li>
          <li><a href="#/slide0123">Tuples</a></li>
          <li><a href="#/slide0127">Type Classification</a></li>
          <li><a href="#/slide0129">Sets</a></li>
          <li><a href="#/slide0134">String Formatting</a></li>
          <li><a href="#/slide0145">Sequence Iteration</a></li>
          <li><a href="#/slide0148">Range</a></li>
          <li><a href="#/slide0150">Zip</a></li>
          <li><a href="#/slide0154">Reversed</a></li>
          <li><a href="#/slide0155">Enumerate</a></li>
          <li><a href="#/slide0157">Comprehensions</a></li>
          <li><a href="#/slide0169">Equality and References</a></li>
          <li><a href="#/slide0171">Shallow Copies</a></li>
          <li><a href="#/slide0172">Deep Copies</a></li>
        </ul>
</section>

<section id="slide0062" data-unique="numbers_2">
        <h3><span class="index_keyword" data-indexkeyword="numbers">Numbers</span></h3>
        <ul><li>Builtin Numbers
          <ul><li> Integers - int : a = 32, b = -23, c = 0x7fa8</li>
            <li> Floating point numbers - float </li>
            <li> Complex numbers (x=1+2j)</li>
            <li> Booleans (<b>True</b> = 1, <b>False</b> = 0)</li>
          </ul></li>
        <li> <b>long</b> and <b>int</b> have been merged to <b>int</b> in python &gt; 3.0.
        sys.maxint has been removed &gt; 3.0 because there is no max anymore. </li>
        <li>Try this:
<pre>
import sys; print(sys.float_info)</pre>
        </li>
        </ul>
</section>

<section id="slide0063" data-unique="integers_0">
      <h3><span class="index_keyword" data-indexkeyword="integer">Integers</span></h3>
      <p>Warning: Implementation details ahead. May not match your Python.</p>
        <div class="includeContent">slide_scripts/290integers.html</div>

        <img src="img/integers_refcount.svg" alt="Integers refcount example" class="2@3">
</section>

<section id="slide0064" data-unique="integers_1"><h3>Integers</h3>
        <img src="img/reference_count.png" alt="ref count" class="4@6">
</section>

<section id="slide0065" data-unique="integers_2"><h3>Integers</h3>
      <p>Cpython Implementation details</p>
      <ul><li>Python 2.xx: a = 25L promotes 25 (integer object) to a long type.
<pre>
typedef struct {
  /* Macro: Brings in refcount and a pointer to a type object */
  PyObject_HEAD
  long ob_ival; /* Stored Value */
} PyIntObject;
</pre>
        </li>
        <li>Python 3.xx: int and long are integrated into one type
<pre>
struct _longobject {
  /* Macro: Brings in refcount/size/a pointer to a type object */
  PyObject_VAR_HEAD
  digit ob_digit[1];
};
</pre>
        </li>

      </ul>
</section>

<section id="slide0066" data-unique="integers_operations_0">
      <h3><span class="index_keyword" data-indexkeyword="integer!operations">Integers: Operations</h3>
      <ul><li><pre class="inline">+,-,/,*</pre> have usual meanings.
          <pre class="inline">//</pre> is <span class="index_keyword" data-indexkeyword="floor division">floor division</span>.
      </li>
      <li> More Operations:
        <div class="includeContent">slide_scripts/279moreoperations.html</div>
      </li>
      </ul>
</section>

<section id="slide0067" data-unique="integers_3"><h3>Integers</h3>
        <div class="includeContent">slide_scripts/280integers.html</div>
      
</section>

<section id="slide0068" data-unique="floats_0">
        <h3><span class="index_keyword" data-indexkeyword="float">Floats</span></h3>
        <div class="includeContent">slide_scripts/20floats1.html</div>
      
</section>

<section id="slide0069" data-unique="boolean_0"><h3><span class="index_keyword" data-indexkeyword="boolean">Boolean</span></h3>
        <div class="includeContent">slide_scripts/21bool.html</div>
  <ul>
    <li><span class="index_keyword" data-indexkeyword="isinstance()">isinstance(obj, cls)</span>:
      <ul>
        <li> Returns True if <i>obj</i> is an instance of class <i>cls</i>.
      </ul>
    </li>
  </ul>
      
</section>


<section id="slide0070" data-unique="none_0"><h3><span class="index_keyword" data-indexkeyword="None">None</span></h3>
        <ul>
        <li>The only built-in constant of NoneType to represent the absence of a value</li>
        <li>None has no value but has a constant identity since the interpreter creates a single None object.
        <li>Comparing names with <div class="pcode">None</div>:
          <ul>
            <li>Check identity with the <div class="pcode">is</div> operator:
                <div class="pcode">is</div> or <div class="pcode">is not</div>
            </li>
            <li><pre class="inline">x is None</pre> is equivalent to <pre class="inline">id(x) == id(None)</pre></li>
          </ul>
        </li>
        <li>Beware of writing <div class="pcode">if x</div> when you really mean <div class="pcode">if x is not None</div></li>
        </ul><div class="includeContent">slide_scripts/22none.html</div>
</section>

<section id="slide0071" data-unique="strings_0">
        <h3><span class="index_keyword" data-indexkeyword="string">Strings</span></h3>
        <ul><li>A String is a series of characters.</li>
        <li>To represent strings, use code like ASCII, Win-1252...</li>
        <li>Problem: Too many characters from too many languages</li>
        </ul><img src="img/quivira.png" alt="Skull and Bones" class="2@4"><p>Solution: <b>Unicode</b></p>
      
</section>

<section id="slide0072" data-unique="unicode_0">
        <h3><span class="index_keyword" data-indexkeyword="string!unicode">Unicode</span></h3>
        <ul><li>Provide a unique <i>code point</i>-a number, not a glyph-for each character.</li>
        <li>More than Million code-points. Keeps ASCII a subset</li>
        </ul><img src="img/devunicode.png" alt="Devnagri unicode" class="3@4">
</section>

<section id="slide0073" data-unique="unicode_1"><h3><span class="index_keyword" data-indexkeyword="unicode">Unicode</span></h3>
        <ul><li>In Python 3.0+, Unicode strings are default</li>
        <li>In Python 3.3+, with or without 'u'</li>
        </ul><div class="includeContent">slide_scripts/23unicodepa.html</div>
      
</section>

<section id="slide0074" data-unique="encoding_0">
        <h3><span class="index_keyword" data-indexkeyword="string!encoding">Encoding</span></h3>
        <ul><li>In memory/disk/network, strings are just a sequence of bytes</li>
        <li>How do we map Unicode code points to bytes?</li>
        <ul><li>Note: An integer (code point) can be written in many different ways into bytes. </li>
        <li>Example: Big Endian (09 2A) / Little Endian (2A 09).</li>
        </ul><li><p><a href="http://docs.python.org/3/library/codecs.html#standard-encodings">Many encodings</a>: UTF-8, UTF-16, UCS-2, UTF-32, ... </p></li>
        </ul>
</section>

<section id="slide0075" data-unique="python_2_x_str_and_unicode_0"><h3>Python 2.x: str and unicode</h3>
        <ul><li>str: Sequence of bytes</li>
        <li>unicode: Sequence of Code points</li>
        <li>unicode.encode() &#8594; Bytes</li>
        <li>bytes.decode() &#8594; unicode</li>
        <li>Mixing bytes and unicode allowed</li>
        </ul><pre>
u"Hello" + "World" # Implicit conversion to Unicode
</pre>
      
</section>

<section id="slide0076" data-unique="python_3_x_str_bytes_bytearray_0">
  <h3>Python 3.x: str bytes bytearray</h3>
        <ul><li>Remember: Characters are transmitted/stored in bytes.</li>
        </ul><img src="img/stringandbytes.svg" alt="Strings and Bytes" class="3@4">
</section>

<section id="slide0077" data-unique="files_0">
    <h3>Files</h3>
        <img src="img/hindi_piyush.png" alt="Piyush in Hindi"><div class="includeContent">slide_scripts/24unicodefiles.html</div>
      
</section>

<section id="slide0078" data-unique="encoding_decoding_errors_0"><h3>Encoding/Decoding Errors</h3>
        <ul><li>Encoding/Decoding can use error handling policy:
           <pre>
.encode([encoding='utf-8'], [errors='strict'])
.decode([encoding='utf-8'], [errors='strict'])
           </pre>
        </li>
        <li>errors:
          <ul><li>strict : Default</li>
            <li>ignore : Ignore the errors</li>
            <li>replace: Replace with ? or another character</li>
          </ul></li>
        </ul>
</section>

<section id="slide0079" data-unique="unicode_2"><h3><span class="index_keyword" data-indexkeyword="unicode">Unicode</span></h3>
        <ul><li>IO is always bytes</li>
        <li>Know your correct encoding</li>
        <li>Unicode is everywhere: Web pages, databases, XML,...</li>
        <li>Always write unicode aware code</li>
        <li>In Python: float + int = float</li>
        <li>Only in Python 2.x: string + unicode = unicode </li>
        <li>UTF-8 is the king of all encodings</li>
        </ul>
</section>

<section id="slide0080" data-unique="strings_1"><h3>Strings</h3>
        <div class="includeContent">slide_scripts/25stringeasy.html</div>
      
</section>

<section id="slide0081" data-unique="strings_2"><h3>Strings</h3>
        <div class="includeContent">slide_scripts/25multilinestring.html</div>
        <ul><li>Strings may contain binary data, control characters (non-printing), etc. </li>
          <li>One of the most used types in python</li>
          <li>Works like an array</li>
          <li>Immutable: can't modify inplace</li>
        </ul>
</section>

<section id="slide0082" data-unique="strings_indexing_0">
        <h3><span class="index_keyword" data-indexkeyword="string!indexing">Strings: Indexing</span></h3>
        <ul><li><i>name</i>[<i>index</i>]</li>
          <li><i>index</i> should be an integer. -ve integers allowed</li>
        </ul><div class="includeContent">slide_scripts/26stringindex.html</div>
      
</section>

<section id="slide0083" data-unique="strings_3"><h3>Strings</h3>
        <div class="includeContent">slide_scripts/27stringindexprint.html</div>
      
</section>

<section id="slide0084" data-unique="strings_4">
        <h3><span class="index_keyword" data-indexkeyword="string!slicing">Strings</span></h3>
        <p>Indexing and Slicing</p>
        <img src="img/string_indexing.svg" alt="Strings and Bytes" class="2@5">
</section>

<section id="slide0085" data-unique="string_slicing_0"><h3>String Slicing</h3>
        <p> Two types of slicing </p>
        <ul><li><div class="pcode">S[start:end]</div> -- end is not included in result</li>
        <li><div class="pcode">S[start:end:step]</div> -- Extract all items in S from offset start thru end-1 by step.</li>
        </ul><div class="includeContent">slide_scripts/28string_slicing.html</div>
      
</section>

<section id="slide0086" data-unique="string_methods_0">
        <h3><span class="index_keyword" data-indexkeyword="string!methods">String Methods</span></h3>

        <ul>
        <li>An example to convert jabber id to email address</li>
        <li>When a XMPP chat server talks to a client, it uses a jid.</li>


        <div class="includeContent">slide_scripts/29stringjid.html</div>


        <li><div class="pcode">s.find(t)</div> - first occurance of t in s.</li>
        <li><div class="pcode">s * n</div> - replicate s, n times.</li>
        <li>How would you test if a string is a Palindrome using slicing?</li>
        </ul>
      </section>

<section id="slide0087" data-unique="string_methods_1"><h3>String Methods</h3>

        <ul><li>You have already seen some conversions using
        <div class="pcode">str()</div>,
        Length using <div class="pcode">len(s), s.upper(), s.lower(), s.find(t), s*n,</div> indexing, slicing </li>

        <div class="includeContent">slide_scripts/30strmethods.html</div>
        </ul>
</section>

<section id="slide0088" data-unique="string_methods_2"><h3>String Methods</h3>

        <ul><li><div class="pcode">help(str)</div> - Lots of methods</li>
        <li><div class="pcode">help(str.find)</div> - Try it now !! </li>
        <li><div class="pcode">S.center(width [, fillchar] )</div> -- Return S centered in a string of length width. Padding is done using the specified fill  character (default is a space)</li>
        <li><div class="pcode">S.ljust(width[, fillchar])</div> -- Return S left-justified in a string of length width. Padding is done using the specified fill character (default is a space).</li>
        <li><div class="pcode">S.split([sep [,maxsplit]])</div> -- Return a "list" of the words in the string S, using sep as the delimiter string.</li>
        <li><div class="pcode">S.join(iterable)</div> -- Return a string which is the concatenation of the strings in the iterable.  The separator between elements is S.</li>
        <li>Tons of these &#8230;</li>
        </ul>
</section>

<section id="slide0089" data-unique="string_methods_3"><h3>String Methods</h3>

        <div class="includeContent">slide_scripts/31strmethods.html</div>
      
</section>

<section id="slide0090" data-unique="string_methods_1">
        <h3>String Methods</h3>

        <img src="img/strmethods.png" alt="Strings and Bytes" class="3.5@5">

      </section>

<section id="slide0091" data-unique="string_methods_5"><h3>String Methods</h3>

        <img src="img/strmethods_1.png" alt="Strings and Bytes" class="2.5@5">
</section>

<section id="slide0092" data-unique="changing_strings_0"><h3>Changing Strings</h3>

        <ul><li>Strings are <span class="index_keyword" data-indexkeyword="immutable">Immutable</span> == read only</li>
          <li>Changing string data implies creation of new strings.</li>
        </ul><div class="includeContent">slide_scripts/32changingstrings.html</div>

      
</section>

<section id="slide0093" data-unique="quiz_4"><h3 class="quiz">Quiz</h3>
        <p>What is the complexity of the following code snippet</p>
        <pre>
fruits = ['apple', 'banana', 'orange', 'guava', 'pinaple']

line = fruits[0]
for namef in fruits[1:]:
    line += ', ' + namef
print(line)</pre>
        <div class="answer">

          <div class="correct">O(n)</div>
          <div class="answerstring"> Wrong !! Think. Why is this slow?</div>

          <div class="incorrect">O(n^2)</div>
          <div class="answerstring">Correct! Repeatedly invoking += on strings is
          a quadratic operation. The faster way to do this is
          <div class="pcode">','.join(fruits)</div></div>
        </div>
      
</section>

<section id="slide0094" data-unique="changing_strings_1"><h3>Changing Strings</h3>
        <p>Some string brain teasers to try on your own</p>
        <ul><li>Write a function that returns the reverse of a string.</li>
          <li>Write a function that, given a string, removes all white spaces
          from the string</li>
          <li>Not for the faint heart: Find the longest palindrome in a given string efficiently</li>
        </ul>
</section>

<section id="slide0095" data-unique="changing_strings_2"><h3>Changing Strings</h3>

        <ul><li>Take a ticker: e.g.  "GLD"</li>
          <li>Print its current stock value parsed from google finance webpage. The url to query is :</li>
        </ul>
        <div class="includeContent">slide_scripts/33stockurl.html</div>

      
</section>




<section id="slide0096" data-unique="struct_0">
  <h3><span class="index_keyword" data-indexkeyword="binary data">Binary data</span></h3>
  <ul>
    <li>Binary data can exist in network responses or in files:
        <div class="includeContent">slide_scripts/network_response_as_bytes.html</div>
    </li>
    <li>A sequence of bytes can be interpreted in any way</li>
    <li>Fix the structure of the binary data with a format string</li>
    <li>Use module <span class="index_keyword" data-indexkeyword="struct">struct</span> along with the format string:
    <ul>
      <li>Unpack binary data based on a defined format</li>
      <li>Convert bytes to packed binary data</li>
    </ul>
    </li>
  </ul>
</section>

<section id="slide0097" data-unique="struct_format_string">
  <h3><span class="index_keyword" data-indexkeyword="struct!format string">struct: Format strings</span></h3>
  <ul>
    <li>Composed of Format Characters</li>
    <li>They specify the expected structure while packing/unpacking bytes.</li>
    <li><pre class="inline">4si</pre> means a string of length 4 followed by an integer
        <div class="includeContent">slide_scripts/struct_calcsize.html</div>
    </li>
  </ul>
        <table class="table">
        <col style="width:20%">
        <col style="width:50%">
        <col style="width:20%">
          <thead>
            <tr>
              <th>Format</th>
              <th>Python type</th>
              <th>Size</th>
            </tr>
          </thead>
          <tbody>

            <tr>
              <td>c</td>
              <td>byte</td>
              <td>1</td>
            </tr>

            <tr>
              <td>?</td>
              <td>Bool</td>
              <td>1</td>
            </tr>

            <tr>
              <td>i</td>
              <td>integer</td>
              <td>4</td>
            </tr>

            <tr>
              <td>f</td>
              <td>float</td>
              <td>4</td>
            </tr>

            <tr>
              <td>d</td>
              <td>float</td>
              <td>8</td>
            </tr>

            <tr>
              <td>s</td>
              <td>bytes</td>
              <td></td>
            </tr>

          </tbody>
        </table>

</section>

<section id="slide0098" data-unique="struct_example"><h3>struct: Example</h3>
    <div class="includeContent">slide_scripts/struct_pack_unpack.html</div>
</section>


<section id="slide0099" data-unique="lists_0"><h3><span class="index_keyword" data-indexkeyword="list">Lists</span></h3>

        <ul><li>Ordered collection of arbitrary objects</li>
        </ul><div class="includeContent">slide_scripts/34list.html</div>
        <ul><li>Variable-length, heterogeneous, and arbitrarily nestable
          <div class="includeContent">slide_scripts/35list.html</div>
          </li>
        </ul>
</section>

<section id="slide0100" data-unique="lists_1"><h3>Lists</h3>

        <ul><li>Mutable Sequence
          <div class="includeContent">slide_scripts/36list.html</div>
          </li>
          <li>Array of object references : Think of as array of pointers.
          <ul><li>They use a lot more space than C Arrays</li>
            <li>If you want something closer to C Arrays: array.array
              <ul><li>Only homogenous types allowed</li>
              </ul></li>
            <li>If you want to do math with arrays, look at NumPy</li>
          </ul></li>
        </ul>
</section>

<section id="slide0101" data-unique="lists_2">
        <h3><span class="index_keyword" data-indexkeyword="list!slicing">Lists</span></h3>

        <ul><li>Slicing same as strings, but now mutable.</li>
        </ul><div class="includeContent">slide_scripts/37list.html</div>
      
</section>

<section id="slide0102" data-unique="lists_3"><h3>Lists</h3>

        <p>Operations you already know:</p>
        <div class="includeContent">slide_scripts/38list.html</div>
      
</section>

<section id="slide0103" data-unique="exercise_3_0"><h3>Exercise 3</h3>
        <ul><li>Not to be graded. </li>
          <li>Write a function to convert a Jabber ID to an email id:</li>
          <li>Jabber ids look like: piyush@gmail.com/CDEFGB</li>
          <li>But sometimes xmpp servers go wild and send: piyush@gmail.com as a jabber id</li>
        </ul>
</section>

<section id="slide0104" data-unique="list_methods_0">
        <h3><span class="index_keyword" data-indexkeyword="list!methods">List Methods</span></h3>

        <ul>
          <li><div class="pcode">L.count(x)</div> : Returns number of items of L that are equal to x. </li>
          <li><div class="pcode">L.index(x)</div> : Returns the index of the first occurrence of an item in L that is equal to x, or raises an exception if L has no such item. </li>
          <li><div class="pcode">L.append(x)</div> : Appends item x to the end of L ; e.g., L[len(L):]=[x]. </li>
          <li><div class="pcode">L.insert(i, x)</div> : Inserts item x in L before the item at index i, moving following items of L (if any) "rightward" to make space (increases len(L) by one, does not replace any item, does not raise exceptions: acts just like L[i:i]=[x]).</li>
          <li><div class="pcode">L.remove(x)</div> : Removes from L the first occurrence of an item in L that is equal to x, or raises an exception if L has no such item.</li>
        </ul>
      </section>

<section id="slide0105" data-unique="list_methods_1"><h3>List Methods</h3>

        <ul><li><div class="pcode">L.pop([i])</div> : Returns the value of the item at index i and removes it from L; if i is omitted, removes and returns the last item; raises an exception if L is empty or i is an invalid index in L. </li>
          <li><div class="pcode">L.reverse()</div> : Reverses, in place, the items of L. </li>
          <li><div class="pcode">L.sort(cmp=cmp, key=None, reverse=False)</div> : Sorts, in-place, the items of L, comparing items pairwise via the function passed as cmp (by default, the built-in function cmp). When argument key is not None, what gets compared for each item x is key(x), not x itself.</li>
        </ul>
</section>

<section id="slide0106" data-unique="list_methods_2"><h3>List Methods</h3>

        <ul><li>Iteration using for works with a string as well as any other sequence. </li>
        </ul><div class="includeContent">slide_scripts/39iteration.html</div>
      
</section>

<section id="slide0107" data-unique="list_review_0"><h3>List: Advanced Details</h3>

        <ul><li>Both, indexable and mutable </li>
          <li>Implemented as an array of pointers. Check Python Source Directory for:
            <ul><li>./Objects/listobject.c </li>
            <li>./Include/listobject.h </li>
            </ul>
          </li>
          <li>Fixed size pointers to objects. Overallocates initially, then uses realloc() and memcpy() </li>
          <li>Fast <div class="pcode">append()</div>, <div class="pcode">pop()</div> only on the right end:
              O(1) amortized</li>
          <li>Costly <div class="pcode">insert()</div>: amortized can be O(n) </li>
          <li>Less space than sets/dictionaries (which have O(1) lookups) </li>

    </ul>
</section>

<section id="slide0108" data-unique="advanced_lists_0"><h3>List: Advanced Details</h3>
    <ul>
      <li>So, lists are efficient on the right end. Same efficiency on both ends?</li>
      <li>collections.deque: 
          <ul>
          <li>Works as both stack and queue</li>
          <li>thread-safe, doubly-linked list of block nodes: ./Modules/_collectionsmodule.c</li>
          <li>O(1): pop() and append() on the right end</li>
          <li>O(1): amortized <div class="pcode">appendleft()</div>, <div class="pcode">popleft()</div>
          </li>
          <li>Indexing and insertion, as in a list, are not efficient</li>
          </ul>
      </li>
    </ul>
</section>

<section id="slide0109" data-unique="exercise_0"><h3>Exercise</h3>

        <ul><li>Implement a function with usage: parse_tag(s, "tag", int)</li>

            <li>Given a string containting &lt;tag&gt;20&lt;/tag&gt;, the function will return 20 in this case. </li>
            <li>Use this function to implement another function to parse :  http://api.wunderground.com/auto/wui/geo/WXCurrentObXML/index.xml?query=TLH </li>

            <li>And return a list with the following data: current temperature, visibility (miles), wind_degrees, wind_mph. </li>
            <li>Not for the faint heart: Given a sorted list of integers, and an
            input number x, find two indices such that L[i]+L[j] == x, in O(n) time
            and O(1) space.</li>
        </ul>
</section>

<section id="slide0110" data-unique="files_1"><h3><span class="index_keyword" data-indexkeyword="file">Files</span></h3>
        <ul><li>Non-volatile collections of (usually large) data in secondary memory</li>
        <li>Referenced with names called filenames.</li>
        <li>Textual content is usually stored as strings terminated with newlines</li>
        <li> Basic questions when we want to handle text files:
          <ul><li>How to open files?</li>
            <li>What's the role of newlines and how to remove them?</li>
            <li>How can we convert strings to numbers?</li>
          </ul></li>
        </ul>
</section>

<section id="slide0111" data-unique="files_0">
        <h3>Files</h3>
        <ul>
        <li>Example: open a file and fetch one line at a time

<pre>
$ cat portfolio.csv
VZ, 110
NYSE:GLD, 20
NYSE:BAC, 100
</pre>
       </li>
       </ul>
            <div class="includeContent">slide_scripts/40files.html</div>
      </section>

<section id="slide0112" data-unique="files_3"><h3>Files</h3>
        <p>Example: open a new file and write a line to it</p>
            <div class="includeContent">slide_scripts/41files.html</div>
      
</section>

<section id="slide0113" data-unique="files_4"><h3><span class="index_keyword" data-indexkeyword="file!methods">Files</span></h3>

        <ul><li>Close is optional. Files are seekable - <div class="pcode">f.seek(offset)</div></li>
            <li>Files are buffered - <div class="pcode">f.flush()+os.fsync(f.fileno())</div> </li>
            <li>Reading files: <div class="pcode">f_text = f.read()</div> [newlines not interpreted ]</li>
            <li>Reading a file line by line : <div class="pcode">f_line = f.readline()</div></li>
            <li>Read all lines in a List : <div class="pcode">f_lines = f.readlines()</div></li>
            <li>Another way of doing iterations :
            <div class="includeContent">slide_scripts/42files.html</div>
            </li>
            <li>Which one do you think is memory efficient?</li>
        </ul>
</section>

<section id="slide0114" data-unique="file_location_0"><h3>File Location</h3>

        <ul><li>What directory is python looking for the file for? </li>
        </ul><div class="includeContent">slide_scripts/43files.html</div>
      
</section>

<section id="slide0115" data-unique="exercise_5_0"><h3>Exercise 5</h3>

        <ul><li>Write python program to read portfolio.csv file and print
                out the current value of the portfolio. Use the following template
            </li>
        </ul><div class="includeContent">slide_scripts/44files.html</div>
      
</section>

<section id="slide0116" data-unique="dictionaries_0"><h3><span class="index_keyword" data-indexkeyword="dictionary">Dictionaries</span></h3>
        <ul><li>Accessed by a key ( a hash table / 'associative arrays' )</li>
          <li>Unordered collection:
             <ul><li>Doesn't matter where in memory the objects are located</li>
             </ul></li>
          <li>Mutable, hetrogeneous and nestable</li>
        </ul><div class="includeContent">slide_scripts/45dict.html</div>
      
</section>

<section id="slide0117" data-unique="dictionaries_1"><h3>Dictionaries</h3>
        <ul><li>Getting help for dictionaries:
          <div class="includeContent">slide_scripts/47dict.html</div>
          </li>
          <li>Some operations:
            <div class="includeContent">slide_scripts/46dict.html</div>
          </li>
        </ul>
</section>

<section id="slide0118" data-unique="dictionaries_2"><h3>Dictionaries</h3>
        <div class="includeContent">slide_scripts/53lookup.html</div>
      
</section>

<section id="slide0119" data-unique="more_dictionary_ops_0"><h3>More dictionary ops</h3>
        <div class="includeContent">slide_scripts/48dict.html</div>
      
</section>

<section id="slide0120" data-unique="dictionary_details_0"><h3>Dictionary details</h3>

        <ul><li> Keys should be immutable
          <ul><li> Numbers, strings, tuples </li>
            <li> See <a href="#/slide0127">Type Classification Slide</a> </li>
            <li> Reason: hashing (fast lookups) </li>
            <li> Technical requirements: hash, == defined.</li>
          </ul></li>
        <li> Not lists or other dictionaries </li>
        <li> No restrictions on values </li>
        <li> Keys will be listed in arbitrary order
          <ul><li> Because of hashing </li>
          </ul></li>
        <li>Python's C Source: Objects/dictobject.c</li>
        </ul>
</section>

<section id="slide0121" data-unique="dictionary_looping_0"><h3>Dictionary looping</h3>

        <ul><li>Examples:
          <div class="includeContent">slide_scripts/50dict.html</div>
          </li>
        </ul>
</section>

<section id="slide0122" data-unique="exercise_6_0"><h3>Exercise 6</h3>

        <ul><li>JSON API of openbook library example
          (not to be graded)</li>
        </ul><div class="includeContent">slide_scripts/51dict.html</div>

      
</section>

<section id="slide0123" data-unique="tuples_0"><h3><span class="index_keyword" data-indexkeyword="tuple">Tuples</span></h3>

        <ul><li>Ordered collection </li>
          <li>Accessed by offset </li>
          <li>Immutable </li>
          <li>Heterogeneous, Nestable </li>
          <li>Arrays of object references </li>
          <li>To get help use:
            <ul><li>help(())</li>
              <li>dir(())</li>
            </ul></li>
          <li>Example : T = ('VZ', 110, 26.75) </li>
        </ul>
</section>

<section id="slide0124" data-unique="tuples_1"><h3>Tuples</h3>
            <table><col style="width:40%"><col style="width:60%"><thead><tr><th> Operation </th>
                  <th> Interprestation </th>
                </tr></thead><tbody><tr><td> () </td>
                  <td> An empty tuple </td>
                </tr><tr><td> T = (0, ) </td>
                  <td> One-item tuple (not an expression) </td>
                </tr><tr><td> T = (0, 'VZ', 3.1, 2) </td>
                  <td> A four-item tuple </td>
                </tr><tr><td> T = ('out', ('in1', 'in2')) </td>
                  <td> Nested tuples </td>
                </tr><tr><td> T = tuple('spam') </td>
                  <td> Create tuple using iterable </td>
                </tr><tr><td>T[i], T[i][j], T[i:j], len(T)</td>
                  <td> Index, recursive index, slice, length</td>
                </tr><tr><td> T1 + T2, T * 3 </td>
                  <td> Concatenate, Repeat </td>
                </tr><tr><td> if x in T: print(x) </td>
                  <td> Containment, membership. </td>
                </tr><tr><td> for x in T: print(x) </td>
                  <td> Iteration </td>
                </tr></tbody></table>
</section>

<section id="slide0125" data-unique="tuples_2">
        <h3><span class="index_keyword" data-indexkeyword="tuple vs list">Tuples</span></h3>
        <ul><li>Why Tuples when lists exist?

            <ul><li>Efficiency </li>
              <li>Lists - optimized for appends() </li>
              <li>Lists use more memory </li>
              <li>Integrity - tuples can't change. </li>
              <li>Tuples can be used as dictionary keys, Lists can't. </li>
          </ul></li>
        </ul>
</section>

<section id="slide0126" data-unique="tuple_unpacking_0">
        <h3><span class="index_keyword" data-indexkeyword="tuple!unpack">Tuple Unpacking</h3>
        <ul><li>Parallel assignment in Python</li>
        </ul><div class="includeContent">slide_scripts/84assignment.html</div>
      
</section>

<section id="slide0127" data-unique="type_classification_0">
            <h3><span class="index_keyword" data-indexkeyword="mutable types">Type Classification</span></h3>
            <table style="margin-left:auto; margin-right:auto;"><col style="width:70%"><col style="width:30%"><thead><tr><th> Object Type </th>
                  <th> Mutable ? </th>
                </tr></thead><tbody><tr><td> Numbers (all) </td>
                  <td> No </td>
                </tr><tr><td> Strings </td>
                  <td> No </td>
                </tr><tr><td> Lists </td>
                  <td> Yes </td>
                </tr><tr><td> Dictionaries </td>
                  <td> Yes </td>
                </tr><tr><td> Tuples </td>
                  <td> No </td>
                </tr><tr><td> Files </td>
                  <td> N/A </td>
                </tr><tr><td>  Sets </td>
                  <td> Yes </td>
                </tr><tr><td> Bytes </td>
                  <td> No </td>
                </tr><tr><td> Bytearray </td>
                  <td> Yes </td>
                </tr></tbody></table>
</section>


<section id="slide0128" data-unique="named_tuple">
  <h3><span class="index_keyword" data-indexkeyword="named tuple">Named Tuple</h3>
  <ul>
    <li>Assign names to positions of a tuple</li>
    <li>Ability to access tuple fields with both position indices and names</li>
    <li>Inside module collections: namedtuple(typename, field_names)</li>
  </ul>
  <div class="includeContent">slide_scripts/named_tuple.html</div>
</section>

<section id="slide0129" data-unique="sets_0"><h3><span class="index_keyword" data-indexkeyword="set">Sets</span></h3>
        <ul><li> Mutable </li>
          <li> Can only contain hashable/comparable types </li>
          <li> But can contain different types</li>
          <li> <span class="index_keyword" data-indexkeyword="boolean" data-indexkeyword="set!frozenset">frozenset</span>
               = Immutable version of sets </li>
          <li> Construction from a sequence of hashable types with <i>set()</i>:</li>
        </ul>
    <div class="includeContent">slide_scripts/54sets.html</div>
      
</section>

<section id="slide0130" data-unique="set_operations_0">
   <h3><span class="index_keyword" data-indexkeyword="set!operations">Set Operations</span></h3>
        <div class="includeContent">slide_scripts/55sets.html</div>
      
</section>

<section id="slide0131" data-unique="set_operations_1"><h3>Set Operations</h3>
        <ul><li> Usual operations: <i>max(), min(), len(), sum(),
               help(set), help(set.add), for x in S: print x</i>
          </li>
        </ul><div class="includeContent">slide_scripts/56sets.html</div>
      
</section>

<section id="slide0132" data-unique="exercise_7_0"><h3>Exercise 7</h3>
        <ul><li> Write a function called remove_duplicates()</li>
          <li> Preserve the order of the input.</li>
          <li> Return a tuple as output.</li>
          <li> Assume: for loop can be used on the input sequence. </li>
        </ul>
</section>

<section id="slide0133" data-unique="what_is_left_in_types_0"><h3>What is left in types ?</h3>
        <ul><li> String Formatting </li>
          <li> Sequence Iteration + More on iterations </li>
            <ul><li> Enumerate, zip,  </li>
            </ul><li> Comprehension: List/Set/Dictionary </li>
          <li> Assignment </li>
          <li> Ref counting </li>
          <li> Deep/shallow copying </li>
          <li> TypeChecking </li>
          <li> First Class objects </li>
        </ul>
</section>

<section id="slide0134" data-unique="string_formatting_0">
        <h3><span class="index_keyword" data-indexkeyword="string!formatting">String Formatting</span></h3>
        <ul><li><i>join()</i>
            <ul><li>Glue together a sequence of strings present in a list</li>
              <li>Filler that goes between the strings can be specified</li>
              <li>Memory efficient compared to "+"</li>
            </ul></li>
        </ul><div class="includeContent">slide_scripts/57format.html</div>
      
</section>

<section id="slide0135" data-unique="string_formatting_1"><h3>String Formatting</h3>
        <div class="includeContent">slide_scripts/58format.html</div>
      
</section>

<section id="slide0136" data-unique="string_formatting_2"><h3>String Formatting</h3>
  <ul>
    <li>Directly use module, dictionary or list in formatting</li>
  </ul>
        <div class="includeContent">slide_scripts/59format.html</div>
      
</section>

<section id="slide0137" data-unique="string_formatting_printf_in_c_0"><h3>String Formatting (printf in C) </h3>
          <div class="includeContent">slide_scripts/60format.html</div>
        <div class="includeContent">slide_scripts/61format.html</div>
      
</section>

<section id="slide0138" data-unique="format_codes_0"><h3>Format Codes </h3>

            <table><col style="width:30%"><col style="width:70%">
               <thead><tr><th> Char </th>
                  <th> Formatting </th>
                </tr></thead><tbody><tr><td> s </td>
                  <td> String </td>
                </tr><tr><td> r </td>
                  <td> Uses str instead of repr </td>
                </tr><tr><td> c </td>
                  <td> Character </td>
                </tr><tr><td> d </td>
                  <td> Decimal </td>
                </tr><tr><td> o </td>
                  <td> Octal </td>
                </tr><tr><td> x </td>
                  <td> Hexadecimal </td>
                </tr><tr><td> f </td>
                  <td> Floating Point : [-]i.ddddd </td>
                </tr><tr><td> e </td>
                  <td> Floating Point : [-]i.ddddde+-XX </td>
                </tr><tr><td> g </td>
                  <td> Good use of "E" notation </td>
                </tr></tbody></table>
</section>

<section id="slide0139" data-unique="format_codes_1"><h3>Format Codes </h3>
        <ul><li>0:&lt;10d : Left justified, decimal in a 10-char field. </li>
          <li>0:10d: right justified. decimal in a 10-char field. <b>Default</b></li>
          <li>0:10s: left justified. <b>Default</b></li>
          <li>0:6.2f: Right justified float, width of 6 characters, 2 decimal digits. </li>
          <li>0:^80s: Centered string in 80 character long field. </li>
          <li>0!s:^80s: Convert the value into a string using str(), then format as the last line. </li>
          <li>0!r:^80s: Convert the value into a string using repr(), then format as the last line. </li>
        </ul>
</section>

<section id="slide0140" data-unique="format_review_0"><h3>Format Review </h3>
        <ul><li> {fieldname!conversionflag:formatspec} </li>
          <li> filednames are either Simple or Compound </li>

          <li> Simple Fieldnames: </li>

          <ul><li> Number or keyword naming an argument </li>
          <li> If numbers, they must be valid base 10 integer identifying a positional argument. </li>
          <li> A name is used to identify a keyword argument </li>
          </ul><li> Compound Fieldnames: </li>
          <ul><li> '.' operator  -- 'getattr' </li>
          <li> '[]' operator - 'getitem' </li>
          <li> Arbitrary expressions are not allowed </li>
          </ul><li> conversion flag = r or s ('repr' or 'str') </li>
          <li> formatspec : [[fill]align][sign][width][.precision][type] </li>
        </ul>
</section>

<section id="slide0141" data-unique="format_review_1"><h3>Format Review </h3>

        <ul><li> formatspec : [[fill]align][sign][width][.precision][type] </li>
          <li> [] - Optional arguments </li>
          <li> fill - Character used to pad field to minimum width </li>
          <li> align flag - can be one of the following </li>
        </ul><table><col style="width:30%"><col style="width:70%">
        <thead><tr><th> Symbol </th>
                  <th> Meaning </th>
                </tr></thead><tbody><tr><td> &lt; </td>
                  <td> Left-Aligned within available space (default) </td>
                </tr><tr><td> &gt; </td>
                  <td> Right-Aligned </td>
                </tr><tr><td> = </td>
                  <td> Places padding after the sign (before digits) +000020 </td>
                </tr><tr><td> ^ </td>
                  <td> Centered within available space </td>
                </tr></tbody></table>
</section>

<section id="slide0142" data-unique="format_review_2"><h3>Format Review </h3>

        <ul><li> formatspec : [[fill]align][sign][width][.precision][type] </li>
          <li> sign flag - can be one of the following </li>
            <table><col style="width:30%"><col style="width:70%"><!-- <caption>...</caption>  --><thead><tr><th> Symbol </th>
                  <th> Meaning </th>
                </tr></thead><tbody><tr><td> + </td>
                  <td> Sign Mandatory </td>
                </tr><tr><td> - </td>
                  <td> Sign only for -ve numbers </td>
                </tr><tr><td> ' ' </td>
                  <td> Use space for +ve numbers </td>
                </tr></tbody></table><li> width - minimum field width </li>
            <li> .precision - how many digits to display after the decimal point. For non-numeric types: Maximum field size </li>
        </ul>
</section>


<section id="slide0143" data-unique="f_strings">
    <h3><span class="index_keyword" data-indexkeyword="f string">f strings</span></h3>
    <ul>
      <li>New in Python 3.6</li>
      <li>Allows usage of variable names or even Python expressions inside a string</li>
      <li>Curly brackets contain the names or the expressions</li>
    </ul>
        <div class="includeContent">slide_scripts/302_f_strings.html</div>
</section>


<section id="slide0144" data-unique="exercise_8_0"><h3>Exercise 8</h3>
        <ul><li>Gmail exercise: Pull out gmail emails and format them with added information. </li>
          <li>(Use gmail.py and read gmail.html) </li>
          <li>Problem 2: Print a large integer with comma's. For example:
          1234567 should be printed as 1,234,567 </li>
        </ul>
</section>

<section id="slide0145" data-unique="sequence_iteration_0">
        <h3><span class="index_keyword" data-indexkeyword="iteration">Sequence Iteration</span></h3>
        <ul><li> You've already seen sequence slicing (in strings?). </li>
          <li> Python Sequences: Strings, Lists, Tuples. </li>
          <li> Slicing works the same on all. </li>
          <li> Extended Slicing:
          <ul><li> Sequence[start:end:step] </li>
            <li> Step indicates jump and direction [+ &#8594; Right, - &#8594; Left] </li>
            <li> End - not included as in simple slicing </li>
          </ul></li>
        </ul>
</section>

<section id="slide0146" data-unique="sequence_iteration_1">
   <h3>Sequence Iteration</h3>
        <ul><li> Extended Slicing: </li>
        </ul><div class="includeContent">slide_scripts/62seq.html</div>
      
</section>

<section id="slide0147" data-unique="sequence_iteration_2"><h3>Sequence Iteration</h3>
        <ul><li> You've already seen some simple functions on sequences:
               len, *, +, slicing, extended slicing, min(), max(), sum() </li>
          <li> Simple iteration </li>
        <li> What is the value of x now ? </li>
         <div class="includeContent">slide_scripts/63seq.html</div>
        </ul>
</section>

<section id="slide0148" data-unique="range_vs_xrange_0">
        <h3><span class="index_keyword" data-indexkeyword="range() vs xrange()">range() vs xrange()</span></h3>
        <ul><li> In Python 3+, range = xrange </li>
          <li> range([start,] stop[, step = 1]) &#8594; list of integers </li>
          <li> In Python 2.x:
              <ul><li> Use xrange() when iterating large ranges</li>
                <li> xrange computes values in each iteration. Range creates the whole list in advance </li>
                <li> If you need to count, use xrange: Same syntax. </li>
              </ul></li>

          <li> Examples: </li>
         <div class="includeContent">slide_scripts/64range.html</div>

        </ul>
</section>

<section id="slide0149" data-unique="sequence_built_ins_0"><h3>Sequence Built-ins</h3>
        <ul><li> sorted() - Returns actual sequance, not lazy </li>
          <li> zip() - Lazy evaluation </li>
          <li> reversed() </li>
          <li> enumerate() </li>
          <li> Why isnt sorted() lazy? Because sorting is hard to do lazily? </li>
          <li> How can one do sorting lazily?   </li>
          <li> An interesting project: Implement isorted() in C which would sort lazily&#8230;Benchmark! </li>
        </ul><div class="includeContent">slide_scripts/65seq.html</div>
      
</section>

<section id="slide0150" data-unique="zip_0"><h3><span class="index_keyword" data-indexkeyword="zip()">Zip</span></h3>
        <ul><li> Combines multiple sequences into tuples:
           <div class="includeContent">slide_scripts/66zip.html</div>
          </li>
        </ul><ul><li> Combine keys and values to create a dict:
           <div class="includeContent">slide_scripts/72zipdict.html</div>
          </li>
        </ul>
</section>

<section id="slide0151" data-unique="zip_1"><h3>Zip</h3>
        <ul><li> Can take multiple sequences as input. </li>
          <li> Stops with the shorter of the sequences input. </li>
          <li> Python &lt; 3 users: beware when working with large data.
            <div class="includeContent">slide_scripts/67zip.html</div>
          </li>
        </ul>
</section>

<section id="slide0152" data-unique="zip_2"><h3>Zip</h3>
        <ul><li> Sequences of different length (and equivalent code):
           <div class="includeContent">slide_scripts/68zip.html</div>
          </li>
        </ul>
</section>

<section id="slide0153" data-unique="zip_unpacking_sequences_0">
         <h3><span class="index_keyword" data-indexkeyword="zip()!unpack">Zip + Unpacking Sequences</span></h3>
         <div class="includeContent">slide_scripts/69zip.html</div>
      
</section>

<section id="slide0154" data-unique="reversed_0">
        <h3><span class="index_keyword" data-indexkeyword="reversed()">Reversed</span></h3>
        <ul>
          <li>Returns Iterator :
<div class="includeContent">slide_scripts/70rev.html</div>
          </li>
          <li>Shallow copy of a reversed list can also be obtained with slicing
<div class="includeContent">slide_scripts/list_reversed_slicing.html</div>
          </li>
          <li>Which one's more efficient?
<pre>
$ python -m timeit "l = list(range(10000)); rl = list(reversed(l))"
1000 loops, best of 3: 470 usec per loop
$ python -m timeit "l = list(range(10000)); rl = l[::-1]"
1000 loops, best of 3: 501 usec per loop
</pre>
          </li>
        </ul>
      
</section>

<section id="slide0155" data-unique="enumerate_0">
      <h3><span class="index_keyword" data-indexkeyword="enumerate()">Enumerate </span></h3>
        <ul><li>enumerate(iterable[, start]) &#8594; iterator for index and value of iterable
            <div class="includeContent">slide_scripts/71enumerate.html</div>
            </li>
            <li>Provides counter value for each item. </li>
            <li><div class="pcode">for i, line in enumerate(f, start=1):</div></li>
            <li><div class="pcode">for i, n in enumerate(neighbors[my]):</div></li>
        </ul>
</section>

<section id="slide0156" data-unique="exercise_9_0"><h3>Exercise 9 </h3>
        <ul><li>Gram printing: Input a string. Remove all spaces/commas. Convert
                to lower case. Convert to n-grams. Sort and find frequency of
                3-grams. Output top 10.
            </li>
        </ul>
</section>

<section id="slide0157" data-unique="comprehensions_0">
        <h3><span class="index_keyword" data-indexkeyword="comprehension">Comprehensions </span></h3>
        <ul><li> Supported by:
            <ul><li>  List </li>
               <li>  Dictionary </li>
               <li>  Set </li>
            </ul></li>
           <li>Creates a new sequence, applying an expression on each item in the current sequence.
           </li>
        </ul><div class="includeContent">slide_scripts/72listcomp.html</div>

      
</section>

<section id="slide0158" data-unique="list_comprehensions_0">
    <h3><span class="index_keyword" data-indexkeyword="list!comprehension">List comprehensions</span></h3>
        <ul><li> <div class="pcode">[ expression for v in S [if condition] ] </div></li>
            <li> Motivation: { x | x in S and x &gt; 0}  -- Mathematical Sets.
            </li>
            <li> Filtering sequences - Think of comprehensions </li>
        </ul><div class="includeContent">slide_scripts/73listcomp.html</div>

      
</section>

<section id="slide0159" data-unique="list_comprehensions_1"><h3>List comprehensions </h3>
        <ul><li> Mathematics applications </li>
        </ul><div class="includeContent">slide_scripts/74listcomp.html</div>
      
</section>

<section id="slide0160" data-unique="set_and_dictionary_comprehensions_0">
    <h3><span class="index_keyword" data-indexkeyword="comprehension!sets and dictionaries">
        Set and Dictionary comprehensions</span>
    </h3>
        <ul><li> Similar to list comprehension. Master one.
            </li>
        </ul><div class="includeContent">slide_scripts/75listcomp.html</div>
      
</section>

<section id="slide0161" data-unique="comprehensions_1"><h3>Comprehensions</h3>
        <ul><li> Collect value of a field - <div class="pcode">[ p[age] for p in people]</div> </li>
          <li> Perform queries/filters </li>
          <li> Quick math </li>
          <li> Small file manipulation:
            <pre>[line.rstrip() for line in open('script.py')]</pre>
          </li>
          <li> Permutation? - A more complicated example. </li>
        </ul><pre>
[x + y for x in list('pk') for y in list('py')] # ['pp','py','kp','ky']
</pre>

      
</section>

<section id="slide0162" data-unique="comprehensions_2"><h3>Comprehensions</h3>
        <ul><li> An inefficient Example:
          <div class="includeContent">slide_scripts/76comp.html</div>
          </li>
          <li> What's the running time of this qsort? </li>
          <li> How can we improve it? </li>
        </ul>
</section>

<section id="slide0163" data-unique="comprehensions_cons_0">
       <h3><span class="index_keyword" data-indexkeyword="comprehension!cons">Comprehensions: Cons </h3>
        <ul>
          <li> For large inputs, a new copy may be too large ?
            <ul>
              <li> Make sure you have enough memory to hold data. </li>
            </ul>
          </li>
          <li> <span class="index_keyword" data-indexkeyword="generator expressions">Generator Expressions</span>:
            <div class="includeContent">slide_scripts/generator_expressions_1.html</div>
          </li>
        </ul>
</section>


<section id="slide0164" data-unique="exercise_10_0"><h3>Exercise 10 </h3>
        <ul><li> 8 queens problem in 8 lines? </li>
          <li> Why does it work?</li>
        </ul><div class="includeContent">slide_scripts/77comp.html</div>
      
</section>

<section id="slide0165" data-unique="objects_0"><h3>Objects </h3>
        <ul><li>Summary:

          <ul><li> Names are just pointers to objects. </li>
            <li> Objects do have types.  </li>
            <li> type(object) - tells the type of object </li>
            <li> Type name is usually a callable that converts an object into that type - Example int(object) vs  &lt; type 'int' &gt;. </li>
            <li> First Class Objects: Everything is an object in python. </li>
          </ul></li>
        </ul>
</section>

<section id="slide0166" data-unique="references_vs_copies_0"><h3>References vs Copies </h3>
        <ul><li>Recap: References are just pointers </li>
        </ul><div class="includeContent">slide_scripts/78ref.html</div>
      
</section>

<section id="slide0167" data-unique="references_vs_copies_1"><h3>References vs Copies </h3>
        <ul><li> Assignment never makes copies. </li>
          <li> X[1] = "one"  # Assignments are pointer copies. </li>
          <li> Modifying a value affects all references.</li>
        </ul><div class="includeContent">slide_scripts/79ref.html</div>
      
</section>

<section id="slide0168" data-unique="references_beware_0"><h3>References : Beware </h3>

        <ul><li> If you don't understand references, you're bound to create problems in your code. </li>
          <li> You assume you can modify a list without changing it in another part of the program&#8230; </li>
          <li> Immutable types are safer. </li>
          <li> Assignments create references. </li>
        </ul>
</section>

<section id="slide0169" data-unique="equality_and_references_0">
        <h3><span class="index_keyword" data-indexkeyword="is operator">Equality and References </span></h3>

        <ul><li> The <i>is</i> operator tests object identity. </li>
          <li> The <i>==</i> operator tests value equivalence </li>
          <!--
          Note: s1 = "X"; s2 = "X" will break this example.
          Small strings point to the same object because python
          decides to intern them. For large strings it creates
          separate objects (CPython). This is implementation
          specific.
          The key here is that in one compilation unit,
          equal string literals are the same object.
          -->
        </ul><div class="includeContent">slide_scripts/80ref.html</div>

      
</section>

<section id="slide0170" data-unique="equality_and_types_0"><h3>Equality and Types </h3>

        <ul><li> How do you check if an object is of a particular type? &#8594;
               Prefer isinstance() to type() (inheritance vs identity)</li>

        </ul><div class="includeContent">slide_scripts/81type.html</div>
      
</section>

<section id="slide0171" data-unique="shallow_copies_0">
      <h3><span class="index_keyword" data-indexkeyword="shallow copy">Shallow Copies </span></h3>

        <ul><li> Using slicing L[:] </li>
          <li> Dictionary and set copy() method. list() method for lists. </li>
        </ul><div class="includeContent">slide_scripts/82copy.html</div>
      
</section>

<section id="slide0172" data-unique="deep_copies_0">
  <h3><span class="index_keyword" data-indexkeyword="deep copy">Deep Copies </span></h3>

        <ul><li> When you need to create a clone of an object (and all it points to - recursively). </li>
        </ul><div class="includeContent">slide_scripts/83copy.html</div>
      
</section>

<section id="slide0173" data-unique="summary_0"><h3>Summary</h3>
        <ul><li> You are now ready to start looking at other people's python codes&#8230; </li>
          <li> You know all the basic principles </li>
          <li> You know about objects </li>
        </ul>
</section>

<section id="slide0174" data-unique="exercise_11_0"><h3>Exercise 11 </h3>

        <ul><li> On types, copies and counts </li>
          <li> One simple trick: Use type lists to format/copy data. </li>
          <li> Implement mergesort. </li>
        </ul>
</section>



<!--11111-->

<!--split-->



<!--
-->

<!--55555-->

<!--Paid user gets to see until here .. everything-->

<!-- eeeeeeeeee  -->
<!-- eeeeeeeeee  -->
    </div> <!-- Slides -->
  </div> <!-- Reveal -->

  <!-- Slides end here -->


  <script src="../components/reveal.js/js/reveal.min.js"></script>
  <script src="../components/reveal.js/lib/js/head.min.js"></script>

  <script src="../js/main.js"></script>

  <script>
    // Full list of configuration options available here:
    // https://github.com/hakimel/reveal.js#configuration
    Reveal.initialize({
      controls: true,
      progress: true,
      history: true,
      keyboard: true,
      overview: true,
      center: true,
      touch: true,
      slideNumber: 'c/t',
      height: 990,
      width: 990,

      margin: 0.2,

      theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

        // Parallax scrolling
        // parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',
        // parallaxBackgroundSize: '2100px 900px',

        // Optional libraries used to extend on reveal.js
        dependencies: [
        { src: '../components/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
        { src: '../components/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        { src: '../components/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        { src: '../components/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
        { src: '../components/reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
        { src: '../components/reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList;}},
        { src: '../components/reveal.js/plugin/search/search.js', async: true }
        ]
/*
*/
      });

  </script>




</body>
</html>
